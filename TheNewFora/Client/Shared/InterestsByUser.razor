@using TheNewFora.Client.Services
@using TheNewFora.Shared
@inject AuthenticationStateProvider AuthStateProvider
@inject IApplicationUsersManager UserManager
@inject IUserInterestsManager UserInterestManager
@inject IInterestsManager InterestManager
@inject IThreadsManager ThreadManager

@if(warning){<button class="btn-warning" @onclick="() => warning=false">@Message</button>}

@foreach(var item in userInterestDtoList)
{
    <div class="card">
        <h5 class="card-header">
            <div class="row">
                <div class="col">
                    <button class="btn btn-link" @onclick="() => HandleClick(item.InterestId)">@item.Name</button>
                </div>
                <div class="col">
                    <a href="InspectInterest/@item.InterestId" class="btn btn-primary">Inspect interest</a>
                </div>
                <div class="col">
                    <EditForm Model="createThread" OnSubmit="() => CreateThread(item.InterestId)">
                        <InputText @bind-Value="@createThread.Name" placeholder="Create new thread"></InputText>
                        <button class="btn-primary" type="submit">Create</button>
                    </EditForm>
                </div>
            </div>
        </h5>
      <div class="card-body">
        @if (showThreads.Where(x => x.InterestId == item.InterestId).FirstOrDefault().ShowThreads)
        {
            <ThreadsByInterests InterestId="item.InterestId"/> 
        }
      </div>
    </div>
}

@code {

    private ApplicationUser currentUser = new();
    private bool admin;
    private List<UserInterestModel> userInterestList = new();
    private List<ThreadModel> threadList = new();
    private List<UserInterestsDto> userInterestDtoList = new();
    private List<ThreadDto> showThreads= new();
    private ThreadModel createThread = new();
    private string Message = "";
    private bool warning;

    private void HandleClick(int id)
    {
        if (showThreads.Where(x => x.InterestId == id).FirstOrDefault().ShowThreads == true)
        {
            showThreads.Where(x => x.InterestId == id).FirstOrDefault().ShowThreads = false;
        }
        else
        {
            showThreads.Where(x => x.InterestId == id).FirstOrDefault().ShowThreads = true;
        }
    }

    private async Task CreateThread(int id)
    {
        if(!threadList.Contains(threadList.Where(x=> x.Name.ToLower() == createThread.Name.ToLower()).FirstOrDefault()))
        {
            createThread.InterestId = id;
            createThread.UserId = currentUser.Id;
            await ThreadManager.AddThreadAsync(createThread);
        }
        else
        {
            Message = "Fail";
            warning = true;
        }
        createThread = new();
        await FetchList();

    }

    private async Task FetchList()
    {
        threadList = await ThreadManager.GetAllThreadsAsync();
        userInterestList = new();
        userInterestList.AddRange(currentUser.UserInterests);
        if(userInterestList is null){ userInterestList = new(); }
        userInterestDtoList = new();
        foreach(var item in userInterestList)
        {
            UserInterestsDto interest = new()
            {
                InterestId = item.InterestId,
                Name = await InterestManager.GetInterestNameAsync(@item.InterestId),
                UserName = await UserManager.GetUserNameByIdAsync(item.UserId)
            };
            userInterestDtoList.Add(interest);
        }
        showThreads = new(); 
        foreach(var item in userInterestList)
        {
            ThreadDto thread = new()
            {
                InterestId = item.InterestId,
                ShowThreads = false
            };
            showThreads.Add(thread);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if(authState.User.Identity is not null &&
        authState.User.Identity.Name is not null)
        {
            var userClaims = authState.User;
            admin = userClaims.Claims.Any(c => c.Value == "Admin");

            string userName = authState.User
            .Identity
            .Name
            .ToString();
            currentUser = await UserManager.GetUserAsync(userName);
        }
        await FetchList();
    }
}
